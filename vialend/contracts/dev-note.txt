

vault v1.2p
	0x0d256db81eEeecA70399C9bF50c611B1FeBdF429	
"0x04B1560f4F58612a24cF13531F4706c817E8A5Fe", //pool
"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6", // tokenA Weth
"0xD87Ba7A50B2E7E660f678A895E4B72E7CB4CCd9C", //tokenB  usdc
		
value: v1.1
		0x58b008535dc1d06dbae22201d3f10b79c80f9dd4
		0x48a815cF2bC8cECBc8C548d1585B209B9Cd51A18
		
0x933EFDc68cB4c1fe4Ef162a87E515768d6f82023 //pool	
0x6fd886fd1e728d9386ba7fe721c856790758add9 //weth
"0xD87Ba7A50B2E7E660f678A895E4B72E7CB4CCd9C", //  usdc

network set:
		[]string{"http://127.0.0.1:7545", "http://127.0.0.1:8545"},
		"0x0c8D15944A4f799D678029523eC1F82c84b85F32", //factory
		"0xE3c433a67e56BD49d93cCA86728C07bE531c2DCc", //callee
		[]string{"e8ef3a782d9002408f2ca6649b5f95b3e5772364a5abe203f1678817b6093ff0",
			"f804a123dd9876c73cef5d198cce0899e6dfc2f851ed2527b003e11cd5383c54"},
		"0x6D30f1bDb702b2Ccc930BF04e094DC2D571FBb6a", //tokenA usdc
		"0x83c3C928F77e74fa44bbF420478991124596d5e8", //tokenB usdt
		"0xeBb29c07455113c30810Addc123D0D7Cd8637aea", //newOwner
		10,
		"0x1fD73Ce67f09753EF1FBbC7A0d411ECD65866ECA", // pool
		"0xD0d1E195c613Cb6eea9308daB69661CAF9760eF9", // bonus token
		"0x33679a533CB10D87CD9e54d649e9Ba7811C546d6", //vault address
		3000, // fee




 solc --optimize --overwrite --abi tester.sol -o ../build
  solc solc --optimize --overwrite --bin tester.sol -o ../build
abigen --abi=../build/tester.abi --bin=../build/tester.bin --pkg=api --out=../deploy/tester/tester.go




>>>>>>>>>>> Addresses:  <<<<<<<<<<<<< 
Accounts:
Test admin 2:
	0x6dd19aEB91d1f43C46f0DD74C9E8A92BFe2a3Cd0
	284b65567176c10bc010345042b1d9852fcc1c42ae4b76317e6da040318fbe7f
	
vault:
	0x33679a533CB10D87CD9e54d649e9Ba7811C546d6   (ganache local)
	0x6D479dc284A7103Ba6329F3e6A0A545f6928FFfe  (ganache local)
	
factory:  
	0x2820BAd125c568C556a86d80A9484fa268A944c2 (ganache local)
	0xc7853A9E7b602Aafe36b8fb95E4b67a2001FD9C5  ( goerli uniswapv3 edited verion)

	0xD15b0a02F508e38266dcB7df057E4F094DB52598 SwapStream uniswap  v3 factory address (goerli) 

 	0x1f98431c8ad98523631ae4a59f267346ea31f984 	 official uniswap v3 factory address:  (all nets) 
	
tokens 
(local)
	tusdc 0x3b88D0E8B11eb7C5fbC63F1Af1B2795DB1724C59    (local tUSDC , 18) 
	tusdc 0x034A156169e7f3239eDC318747f305d7aA161d8B (local tusdc 6)
	tWETH  0xeDFBec53F1DA0995ea493ebB0A8Ff630Bb2f1e23  (local tWETH)
	tBonus 0xD0d1E195c613Cb6eea9308daB69661CAF9760eF9   
	

(goerli)
	
	eUSDC 0xFdA9705FdB20E9A633D4283AfbFB4a0518418Af8
	eWeth 0x48FCb48bb7F70F399E35d9eC95fd2A614960Dcf8
	
	 elefss1 	0xc4AFB13b10f7C49Af721860A188D6443D0fF8747
	
	 elefss2 (goerli ):  	0x2aDEca523FbBF0937A9419924feAB607Bf599311
	
	 tto-weth (1000000 CAP) 	0x941CD33dd99A623Ab2F058C3A5961F8422652761 (deprecated)  
	
	 tto-usdc (5000000 cap)  	0xC5ca707a0E9F12Ed8D4573CcD38969a21eEeCCf0 (deprecated)
	
	 tto1 (goerli) (9000000 CAP) bonus token:
	0x3C3eF6Ad37F107CDd965C4da5f007526B959532f
	

	tUSDC  (on goerli)
	0xFA5dF5372c03D4968d128D624e3Afeb61031a777   (18 decimals)
	0xcEe3B5618B775bb0c2935D3633675AAa22337155  (18 decimals)
		total supply 26512386160 (  same as USDC on  mainet )
	
	tWETH (on goerli)
	0x3fF5E22B4be645EF1CCc8C6e32EDe6b35c569AE4
	 	total supply 6718113 ( same as WETH on mainet )
	

Pools
	0x616fb433fb74c2ad03613f7b200a9e02df193d0c  (  goerli elefss1/elefss2 )
	
	0xd765dbc1fa901c795ef8b1adbcf0414726428791 pool (elefss2/usdc):  (goerli)

		initial ELEFSS2 65.85 39%  USDC 0.9999 61%


	Pool 1  (tUSDC/tWETH)    (1% fee rate )   (goerli)
	0x5d5f4a5fbb77cd09be9a2fe12c443a3a8ac7336f          
		current  1 tweth=2.9 tusdc

	Pool 2 ( tWETH/tUSDC )   ( fee rate 0.3% )   (goerli)
	0xBF93aB266Cd9235DaDE543fAd2EeC884D1cCFc0c 
		current 1 tweth = 10 tusdc   

	Pool 3 ( tWETH/tUSDC )   ( fee rate 0.05% )   (goerli)
	0xA6525c9A6A86859DdA4F6f6a26748466BdF35CA2 
		current 1 tweth = 3000 tusdc   

	
===



--deploy fundkeeper Contract
1. solc compile fundkeeper (solc -abi, -bin)
2. abigen fundkeeper 
3. fundkeeper_deploy (get contract address)
4. testFundkeeper.go  (change contract address)






Test:



**note: this pool is manually generated through uniswap app by adding these two tokens. 
// now , redeploy the fundkeeper with the new pool address and test the deposit

pool usdc/elef: (goerli)   0xB61f214F672DeBb4a95FA71381E62443288828db
usdc: 0xd87ba7a50b2e7e660f678a895e4b72e7cb4ccd9c
elef (goerli ): 0xd606ddFA13914F274CBa3B4B22120eCc8Ba1C67a
1usdc = 99699 elef




*** deploy new token:

1. Change token name and symbol C:\Users\xdotk\go\src\goblockchain\Practice\Tokens\erc20\contracts\token.sol

2. wsl  
 /// solc-select use 0.7.6
 /// cd /mnt/c/Users/xdotk/go/src/goblockchain/Practice/tokens/erc20/contracts 
	
  solc solc --optimize --overwrite --bin token.sol -o ../build
  solc solc --optimize --overwrite --bin token.sol -o ../build

3. back to windows 
/// C:\Users\xdotk\go\src\goblockchain\Practice\Tokens\erc20\contracts>
abigen --abi=../build/token.abi --bin=../build/token.bin --pkg=api --out=../deploy/token/token.go

4. run C:\Users\xdotk\go\src\goblockchain\Practice\Tokens\erc20\deploy\token_deploy.go

** 手动添加token 到uniswap 并创建pool
** pool 创建完成后， 在etherscan里找到pool 地址
** 修改fundkeeper_deploy.go 里的pool地址。 并运行发布新的fundkeeper 合约,  得到新的fundkeeper合约地址
** 修改testFundKeeper.go 里的fundkeeperContract 地址。并运行 



/// The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.
 
run createpool.go 

factory address: 0xD15b0a02F508e38266dcB7df057E4F094DB52598

usdc: 0xd87ba7a50b2e7e660f678a895e4b72e7cb4ccd9c
elef (goerli ): 0xd606ddFA13914F274CBa3B4B22120eCc8Ba1C67a
weth: 0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6
elefant s1 (ELEFS1)  0x5F05690cCed1a1115a48FB913cc43BFCa95cAFd2




fundkeeper address on (goerli) v0.0.1: 0x623220D8e2C9bEf6cEb22B1895CA84fb38FC36ec ,
(save version) 0x7E83D2768B6A96FD753AB307fac88b08E2B7debA  

fundkeeper address on (goerli) v0.0.2(to on top ): 0x223D2e50a83BcBd68549E99ffD5d57E91624509d
fundkeeper address on (goerli) v0.0.3(to on top ): 0x85F1693750f1BfCFDc631e8371Bce88c73441768

fundkeeper address on (goerli) v0.0.4( moved to back down): 0xf50265ee1E0DB06a39BA3e64DB20d33f77c02dC9

fundkeeper address on (goerli) v0.0.5(token elefss1/elefss2) 0x553eE61a6AD3f5Fc5974EfA3DBfD54A33A5bb7E0

fundkeeper address on (goerli) v0.0.6(token tUSDC/tWETH) 0xf3007DFf71402Ce0985Be930125a34095Dc53D2B
fundkeeper address on (goerli) v0.0.7(token tUSDC/tWETH)0x55B2A37c60635b9A1d5dDE829E9611fa70dd5DDc
0xCBA19bc3AF614a7905b80cc2E58fBf990be670c6 (failed)
0x50ec0Ce318708121F43b47D5D0342614fad278A0 (failed)
0xCe1CC3cC667D5B8925962B6a8F8F997aF018A7AC (failed amount0Min ???? called an old contract?)
0x00ff3577A4657cD3576Ecbc630732a3815A1C613 (failed invalid shares)
0xe7170c1593bB3e436C4DDC78E8FBeDb76C88BC7F (failed shares = 0)
0x5909CE9FD90053426C707a3af8bA1d9f373bA2A3  (failed Deposit amount0 = 0 hardcoded shares = 300 )
0xFed9831d2d42F4E6DA470972762118B6eba0535b 
    hardcoded (300,amountToken0, amountToken1); 
    but failed :ERC20: transfer amount exceeds allowance'

fundkeeper address on (goerli) v0.0.8   
0xEbEf7A52CC1D61b098ED7C77b1Ec44D8F60D9194
	normal _shareByAmount returns, modified require(xx && yy) inside _shareByamount
	failed Deposit amount0'

fundkeeper address on (goerli) v0.0.9
0x6a7C7B0e5484B39F34dF4C6fa95b24d62c40c6eA	
	test function _shares(amountToken0, amountToken1) instead of _shareByAmount 
	success  deposit  but token amount is small (100 and 200, reading 0.0000000000000001) 
	failed withdraw  Fail with error 'withdraw amount0&gt;min, error in the withdraw function

fundkeeper address on (goerli) v0.1.0 current wokring address:
0x6e6F5887CfCB6B13bdF9089152c90606544CB8cA    
	simplifided the withdraw function,  amount0 = amount0Min  amount1 = amount1Min, make sure the shares and amount0,1 is < total
	success deposit 
	success withdraw
 
fundkeeper address on (goerli) v0.1.1 vault address:  (team token give away)
// old working one	tx: 0x7edf0b122166747acc18fcfda1b56fe57960963183ea493ea5e74d2862cd6c53
// 0x4f902ebbd3a13a85da6254b8264e4de1370b5a25

0xB0eeD5760749E2B05db16131bc44c55b5E3fE2b5
	added ttoken give out 100 tto1  (0.0000000000000001)
	success approve tokens
	success deposit 
	success give out team token to the user TTO1

fundkeeper address on (goerli) v0.1.2 vault address:  (team token give away )
0x43E20187D5aa7BD7e76420bbcb0bb5C07d4364a3

	

	
	
	
** changes required:
1. testFundkeeper network 2nd var  fundkeeperAddress
2. testFundkeeperEvent network 2nd var  fundkeeperAddress

demo external functions:  
	deposit    // need sign
	withdraw    // need sign
	getTotalAmount   // pure view
	
abi location : /build/FundKeeper.abi	

Frontend Test:
1. Update Contract address with new address  (revert Error might occur with old address)
2. add token into metamask
usdc: 0xd87ba7a50b2e7e660f678a895e4b72e7cb4ccd9c
weth: 0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6
4. 到uniswap 买点weth 和 usdc
5. call deposit  (token0=usdc, token1=eth)
6. check event




//use wsl 

solc-select use 0.7.5 
// or /home/eric/.local/bin/solc-select use 0.7.5\

solc --optimize --overwrite --abi FundKeeper.sol -o ../build
solc --optimize --overwrite --bin FundKeeper.sol -o ../build


solc --optimize --overwrite --abi feeMaker.sol -o ../build
solc --optimize --overwrite --bin feeMaker.sol -o ../build
abigen --abi=../build/feeMaker.abi --bin=../build/feeMaker.bin --pkg=api --out=../deploy/feeMaker/feeMaker.go


//back to windows

 create a folder /deploy/filename
 create a folder /deploy/filename_script

// run abigen 
abigen --abi=./build/FundKeeper.abi --bin=./build/FundKeeper.bin --pkg=api --out=./deploy/FundKeeper/FundKeeper.go
or
abigen --abi=../build/FundKeeper.abi --bin=../build/FundKeeper.bin --pkg=api --out=../deploy/FundKeeper/FundKeeper.go


//copy and paste the deploy script and modify import and apiDeploy call method and 

/deploy/filename_script/filename_deploy.go

modify import file path: 	api "goblockchain/Practice/SwapStream/deploy/filename"

modify eth client parameters, other constructor variables

modify call api.DeployAPI 


  _pool: 0x04B1560f4F58612a24cF13531F4706c817E8A5Fe


  _protocolFee = 10000
  _maxTotalSupply = 1e+32



run ganache if deploy to local

compile and run _deploy.go



============= uniswapv3 deploy
solc abi
solc bin
abigen --abi=../build/UniswapV3Factory.abi --bin=../build/UniswapV3Factory.bin --pkg=api --out=../deploy/uniswapv3Factory/uniswapV3Factory.go

$GOHOME/build/bin/abigen --abi=../build/UniswapV3Factory.abi --bin=../build/UniswapV3Factory.bin --pkg=api --out=../deploy/uniswapv3Factory/uniswapV3Factory.go




------solc  evm-version
 "evmVersion": "<VERSION>"
solc --optimize --overwrite --abi --evm-version istanbul strategy1.sol.go -o ../build

homestead (oldest version)

tangerineWhistle
	Gas cost for access to other accounts increased, relevant for gas estimation and the optimizer.
	All gas sent by default for external calls, previously a certain amount had to be retained.

spuriousDragon
	Gas cost for the exp opcode increased, relevant for gas estimation and the optimizer.

byzantium
	Opcodes returndatacopy, returndatasize and staticcall are available in assembly.
	The staticcall opcode is used when calling non-library view or pure functions, which prevents the functions from modifying state at the EVM level, i.e., even applies when you use invalid type conversions.
	It is possible to access dynamic data returned from function calls.
	revert opcode introduced, which means that revert() will not waste gas.

constantinople
	Opcodes create2`, ``extcodehash, shl, shr and sar are available in assembly.
	Shifting operators use shifting opcodes and thus need less gas.

petersburg (default)
	The compiler behaves the same way as with constantinople.

istanbul
	Opcodes chainid and selfbalance are available in assembly.

berlin (experimental)


>>>>>>>>>>>>>>>>>>> install Go on WSL / ubuntu >>>>>>>>>>>>>>>>> 

download go v1.17.3   from https://go.dev/doc/install
in wsl2 

sudo apt-get remove golang-go

** move or copy go package to $home dir
cd $home
cp /mnt/c/User/xdotk/downloads/xxxx.tar.gz ./
sudo apt autoremove
sudo tar -xvf go1.17.3.linux-amd64.tar.gz
sudo mv go /usr/local
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
source ~/.profile
go version 

>>>>>>>>>>>>>>>>>>> install abigen 1.10.14 on wsl / ubuntu >>>>>>>>>>>>>>>>>

https://geth.ethereum.org/docs/install-and-build/installing-geth#install-on-ubuntu-via-ppas

	sudo add-apt-repository -y ppa:ethereum/ethereum
	sudo apt-get update
	sudo apt-get install ethereum

	/usr/bin/abigen --version
	
	usage:
	 /usr/bin/abigen --abi=../build/test.abi --bin=../build/test.bin --pkg=api --out=../deploy/test/test.go



>>>>>>>>>>>>>>>>>>> install abigen on wsl2 >>>>>>>>>>>>>>>>>

Assuming you have Go all set up on your computer, simply run the following to install the abigen tool.

go get -u github.com/ethereum/go-ethereum

cd $GOPATH/src/github.com/ethereum/go-ethereum/

sudo apt install protobuf-compiler

make all
make devtools

env GOBIN= go install golang.org/x/tools/cmd/stringer@latest
env GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest
env GOBIN= go install github.com/fjl/gencodec@latest
env GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest
env GOBIN= go install ./cmd/abigen
solc is /home/eric/.local/bin/solc
protoc is /usr/bin/protoc

path of compiled abigen: 
/home/eric/golang/src/github.com/ethereum/go-ethereum/build/bin/abigen

try set the path again and run abigen -- works 
export GOROOT=/usr/local/go
export GOPATH=$HOME/golang
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
source ~/.profile

>>>>>>>>>>>>>>>>>>>>>> install abigen and get on windows >>>>>>>>>>>>>
https://geth.ethereum.org/docs/install-and-build/installing-geth

>>>>>>>>>>>>>>>>>>>>>> solc version select >>>>>>>>>>>>>>>>>>>
install solc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#windows 
downlowd solc package https://github.com/ethereum/solidity/releases


#linux 
solc-select use 0.8.10
solc-select use 0.8.6
solc-select use 0.7.6
solc-select use 0.5.16
solc-select use 0.4.18

solc --version

solc-select versions
Display the currently installed versions:


solc-select install
Available versions to install:
0.3.6
0.4.0
...
0.8.0
0.8.1

solc-select install 0.8.10
solc-select install 0.5.16
solc-select install 0.4.18
Installing '0.5.16'...
Version '0.5.16' installed.




ERRORS TROUBLESHOOTING:

Fail with error 'SafeERC20: low-level call failed'
查看转出账号中的余额是否不足


Fail with No error msg:
1. out of gas?
2. 查看调用方法中账号余额


Fatal: Contract has additional library references, please use other mode(e.g. --combined-json) to catch library infos
solution: 
	if the function in library is public , change public to internal, or view to pure 
	
abigen ERROR:
Fatal: Contract has additional library references, please use other mode
solution:
change public function to internal	
	

Failed to deploy ViaVault by factory, vault address is 0
OUT OF GAS. check gas limit and gas in GetSignature()


### event ERROR:
	contractAbi.Unpack error: abi: cannot marshal in to go type: length insufficient 32 require 64

	solution: see below

### event ERROR
	Abi.Unpack error: abi: attempting to unmarshall an empty string while arguments are expected

	solution:

	use err = abi.UnpackIntoInterface(outptr.Interface(), "method", encb)
	https://github.com/ethereum/go-ethereum/blob/master/accounts/abi/unpack_test.go



### 
	`ERROR` -
	
	go runtime panic: runtime error: invalid memory address or nil pointer dereference
	calling TxConfirm(tx.Hash())
	goerli tx : 0x4d432c2ef310242b004c5b3fe0955b66e0d53782eccf1d2bc2107d9f5dba4266
	
	`cause: 	` -  
	
	`solution: 	` - 
	